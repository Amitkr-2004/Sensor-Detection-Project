name: workflow      #name of the github Action

on:     #Once we push any changes to our github then it will fetch that changes except README.md
  push:
    branches:
      - main
    paths-ignore:
      - 'README.md'

permissions:        
  id-token: write   #it basically allows to acces AWS account
  contents: read    #it allows to read every repository contents 

jobs:   #Basically there are three jobs Continuous Integration->>Continuous Delivery->>Continuous Deployment
  integration:  
    name: Continuous Integration
    runs-on: ubuntu-latest      #That 
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3       #Owner of the action/repository where the acion is present/Version of this

      - name: Lint code
        run: echo "Linting repository"  #From it is telling that we are just doing unit testing to detect any type of error in it

      - name: Run unit tests
        run: echo "Running unit tests"

  build-and-push-ecr-image:
    name: Continuous Delivery
    needs: integration  #Now this sjould be completed
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install Utilities #Install all ubuntu machines by running few commands(line no-> 38,39)
        run: |
          sudo apt-get update
          sudo apt-get install -y jq unzip
      - name: Configure AWS credentials         #Configutring all the AWS credentials
        uses: aws-actions/configure-aws-credentials@v1  #owner is aws-actions/repo-> configure-aws-credential
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}       #now we can configure all those by using these special commands to ECR(container registory)
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Login to Amazon ECR       #just get loggined to it
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR  #Now all the docker contents those we have wrote will be used for continous delivery by the help of few set of commands
        id: build-image
        env:
          IMAGE_TAG: latest
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t ${{ secrets.AWS_ECR_REPO_URI }}:$IMAGE_TAG .
          docker push ${{ secrets.AWS_ECR_REPO_URI }}:$IMAGE_TAG
          
          
  Continuous-Deployment:
    needs: build-and-push-ecr-image     #Before starting this step should be completed
    runs-on: self-hosted    #now it is self hosted which is done thorough runner config
    steps:  
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1  #Got all secret keys
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Login to Amazon ECR       #Loginned to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      
      
      - name: Pull latest images    #Now pulled every details though docker pull command
        run: |
         docker pull ${{ secrets.AWS_ECR_REPO_URI }}:latest
         
                
      # - name: Stop and remove visibility container if running
      #   run: |
      #    docker ps -q --filter "name=visibility" | grep -q . && docker stop visibility && docker rm -fv visibility
      - name: Run Docker Image to serve users
        run: |
         docker run -d -p 8080:8080 --name=sensor -e 'MONGO_DB_URL=${{ secrets.MONGO_DB_URL }}' -e 'AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}' -e 'AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}' -e 'AWS_DEFAULT_REGION=${{ secrets.AWS_DEFAULT_REGION }}' ${{ secrets.AWS_ECR_REPO_URI }}:latest

      - name: Clean previous images and containers
        run: |
         docker system prune -f
